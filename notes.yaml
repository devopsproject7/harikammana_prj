:1  
############ Install Java

java -version

sudo yum list | grep java-1.8
java-1.8.0-openjdk.aarch64              1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-accessibility.aarch64
java-1.8.0-openjdk-accessibility-debug.aarch64
java-1.8.0-openjdk-debug.aarch64        1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-demo.aarch64         1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-demo-debug.aarch64   1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
###java-1.8.0-openjdk-devel.aarch64        1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core 
java-1.8.0-openjdk-devel-debug.aarch64  1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-headless.aarch64     1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-headless-debug.aarch64
java-1.8.0-openjdk-javadoc.noarch       1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-javadoc-debug.noarch 1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-javadoc-zip.noarch   1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-javadoc-zip-debug.noarch
java-1.8.0-openjdk-src.aarch64          1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-src-debug.aarch64    1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core


[ec2-user@ip-172-31-71-190 ~]$ yum install -y java-1.8.0-openjdk-devel.aarch64
---->   Have both compiler (to build) + run time (jenkins needs run time)


##sudo update-alternatives  --config java
There is 1 program that provides 'java'.
  Selection    Command
-----------------------------------------------
*+ 1           java-1.8.0-openjdk.aarch64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.amzn2.0.1.aarch64/jre/bin/java)

Enter to keep the current selection[+], or type selection number: 1



: 2
## install jenkins
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
# Get repo file
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
# import key
sudo   yum install jenkins
sudo systemctl restart jenkins
sudo chkconfig jenkins on



$$$$$$$$$$$$$$$$$$$$$$$$ 333333333333

---->Maven and git


cd /opt
wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
tar -xvf apache-maven-3.6.3-bin.tar.gz 

vim ~/.bash_profile
export M2_HOME=/opt/apache-maven-3.6.3
export M2=/opt/apache-maven-3.6.3/bin
PATH=$PATH:$HOME/bin:$M2:M2_HOME

echo $M2

yum install -y git

$$$$$$$$$$$$$$$$$$$$$$$$   444444444444
---->CI
$$$$$$$$$$$$$$$$$$$$$$$$     5555555555
----> CD
$$$$$$$$$$$$$$$$$$$$$$$$       66666666
---->Jenkins using Maven and git

New job ---myapp--freestyle

git
Build---> invoke Top-level maven targets
        Goals: clean package
        
        
Error: [my-app] $ mvn clean package
FATAL: command execution failed
java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
 

---->solution   
 ----> Global tool config:     Name: maven-3
                               path: /opt/apache-maven-3.6.3
                               
Build---> invoke Top-level maven targets  ---> ########select maven-3
                                    
#compile
#resolve dep
#run test cases
#package it

$$$$$$$$$$$$$$$$$$$$$$$$   77777777777
####scripted Pipeline

#node
#stage
#steps

node {  
    stage('Build') { 
        // 
    }
    stage('Test') { 
        // 
    }
    stage('Deploy') { 
        // 
    }
}


$$$$$$$$$$$$$$$$$$$$$$$$        888888888

string  interpolation
node {  
    
      def name = "hari"
      echo "hello world!!""
--->    echo "Welcome  ${name}"
    
}

$$$$$$$$$$$$$$$$$$$$$$$$           9999999
welcome

$$$$$$$$$$$$$$$$$$$$$$$$       10 101010

--->1743110-10 - Jenkins Pipeline Integrating Git And Maven - DevOps with Jenkins Pipeline, Ansible, Kubernetes _ Docker

pipeline script from SCM

1.) git url
2.) creds
3.) branch
4.) path to script


node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/harikammana_prj.git'
    }
    stage('Compile-package'){
        sh '/opt/apache-maven-3.6.3/bin/mvn clean package'

    }

}


Error: mvn not found

pipeline syntax:
------->tool: use a tool from pre-defined tool installation

node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/harikammana_prj.git'
    }
    stage('Compile-package'){

        //Get maven path
        def mvnHome= tool name: 'maven-3', type: 'maven'
        sh "${mvnHome}/bin/mvn package"

    }

}


$$$$$$$$$$$$$$$$$$$$$$$$           1111111
---->1743110-11 - Jenkins Pipeline Email Notifications 

gmail smtp settings


https://stackoverflow.com/questions/18778240/solve-error-javax-mail-authenticationfailedexception
 There are a few steps you have to keep in mind.

First, make sure you have turned off 2-way authentication of google account
Second, allow access for less secure apps- https://myaccount.google.com/lesssecureapps
Now there are two scenarios If you are developing it in your local machine login to your google account in your browser, this way the google recognizes the machine.

If you have deployed the application onto a server then after the first request you will get an authentication error, so you have to give access to the server, just go here to give access- https://www.google.com/accounts/DisplayUnlockCaptcha


$$$$$$$$$$$$$$$$$$$$$$$$ 121212

---> slack



##Install Slack notification plugin
##SlackSend --->>> pp syntax

Create channel---> connect to App ---> Incoming WebHooks
Webhook URL
https://hooks.slack.com/services/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
 

	Webhook URL  https://hooks.slack.com/services/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
 	Channel	#proj-devops
 	Message	 Welcome to Jenkins
 	Color	good
    Override url	 https://hooks.slack.com/services/
    creds---> secret with text ---> T01LZ7F6PQC/B01LT2YFM8A/RpctibXJs3DXtbpHM1Br26vR
    
    
    


$$$$$$$$$$$$$$$$$$$$$$$$       131313

---->1743110-13 - Parametrizing Jenkins Jobs 


---->
# ################################################By parameterizing jenkins free-style jobs, gives option to pass different parameters to SAME JOB, and can re-user them


properties([parameters([choice(choices: ['master', 'dev', 'yessss'], description: 'branch to build', name: 'branch1')])])

node{
    stage('SCM checkout'){
        echo "Pulling changes from branch  ${params.branch1}"
        git branch: "${params.branch1}", url: 'https://github.com/devopsproject7/harikammana_prj.git'

    }
}    

$$$$$$$$$$$$$$$$$$$$$$$$        1414444
Sonarqube

$$$$$$$$$$$$$$$$$$$$$$$$          151515
install Sonarqube

$$$$$$$$$$$$$$$$$$$$$$$$          161616
---->1743110-16 - Publish Source Code to SonarQube for Static Code Analysis 


NOTE : |
        Important
         build pass if QG pass,else fail



                
---->Notes-1:  (Analysis)
            After Maven build

            [[1;34mINFO[m] Finished at: 2021-02-03T08:59:27Z
            [[1;34mINFO[m] [1m------------------------------------------------------------------------[m
            [Pipeline] }
            [Pipeline] // stage
            [Pipeline] stage
            [Pipeline] { (SonarQube Analysis) (hide)
            [Pipeline] tool
            [Pipeline] withSonarQubeEnv
            ######Injecting SonarQube environment variables using the configuration: sonar-6
            [Pipeline] {
            [Pipeline] sh
            + /opt/apache-maven-3.6.3/bin/mvn sonar:sonar
            [[1;34mINFO[m] Scanning for projects...
            [[1;31mERROR[m] SonarQube server [http://ec2-3-81-82-203.compute-1.amazonaws.com:9000] can not be reached

--->Notes-2:  (quality Gate) --> Webhook required

Webhook: |
         NOTE
         
[[1;  ANALYSIS SUCCESS[m
[1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  9.119 s
[[1;34mINFO[m] Finished at: 2021-02-03T08:19:47Z
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[Pipeline] }
[Pipeline] // withSonarQubeEnv
[Pipeline] { (Quality Gate check)
[Pipeline] timeout
Timeout set to expire in 1 hr 0 min
[Pipeline] {
[Pipeline] waitForQualityGate
Checking status of SonarQube task 'AXdm-d0uvsHxlMI7guyf' on server 'sonar-6'
SonarQube task 'AXdm-d0uvsHxlMI7guyf' status is 'PENDING'
SonarQube task 'AXdm-d0uvsHxlMI7guyf' status is 'SUCCESS'
SonarQube task 'AXdm-d0uvsHxlMI7guyf' completed. Quality gate is 'OK'


##################################################################################################################

1.)  https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

SonarScanner for Maven:

node {
  stage('SCM') {
    git 'https://github.com/foo/bar.git'
  }
  stage('SonarQube analysis') {
    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used
      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
    }
  }
}


2 :  
-------->pipeline syntax---> Wait for QualityGate


1.)   a.) Go to SonarQube ---> generate token
##
---->  (Acts as userid/password for SQ.Using this, Jenkins connects to SQ, and publishes source code 
       b.) Select project: maven
       ##This will give command  to publish src code to SonarQube
                
2.)  #plugin: SonarQube scanner
3.)  Configure system: SonarQube server details
                 Name: |
                  Name: sonar-6
                  SonarQube Url:9000
                  token---> secret text
 

4.) SonarQube : Administration--->Configuration---> webhooks -->
                                       Name:  |
                                         Name: jenkins-server
                                         url: http:jenkins-ip:8080/sonarqube-webhook/
                                 ## After configuring webhooks,When jenkins check for status, send notification back to Jenkins which is used by pipeline-script

 
 
 node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/hello-world.git'
    }
    stage('Compile-package'){

        //Get maven path
        def mvnHome= tool name: 'maven-3', type: 'maven'
        sh "${mvnHome}/bin/mvn package"
    }
     stage('SonarQube Analysis') {
        def mvnHome =  tool name: 'maven-3', type: 'maven'
        withSonarQubeEnv('sonar-6') {                          ##########Given in sonarqube-server
          sh "${mvnHome}/bin/mvn sonar:sonar"                  ## Get maven path,a nd executing sonar:sonar
          
                                                               ####----> this pushblishes source code to sonarQube
        }
    }                                                          ####---> Here,check for status
     stage("Quality Gate check"){       

##This particular function stops the processs for 1hr maximum.Within 1hr, if we get status from SQ server, then code proceeds without any block

## need to wait for sometime (1 hr), because when  we publish src code to sonarQube, it can take few minutes to complete analysis and get report

          timeout(time: 1, unit: 'HOURS') {  ##internally, calling Groovy function  waitForQualityGate
              def qg = waitForQualityGate()  ##if QG failed, mark build as failed  by sending slack notification bczof QG issues                         ##getting status from SQ server, check status, if not ok..Mark build as fail
              if (qg.status != 'OK') {
                               slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#proj-devops', color: 'danger', message: 'SonarQube Analysis Failed', tokenCredentialId: 'slack'

                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
     }
    stage('Email notification'){
             slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#proj-devops', color: 'good', message: 'Welcome tto Jenkins', tokenCredentialId: 'slack'
             
    }

}


### we can create our own Quality Gates and analyze source code based on custom Quality Code




            



                            







