scripted---> node---> stages---> steps
Declarative  --->  pipeleine--->  agent---> stages--> stage---> steps

:1  
############ Install Java

java -version

sudo yum list | grep java-1.8
java-1.8.0-openjdk.aarch64              1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-accessibility.aarch64
java-1.8.0-openjdk-accessibility-debug.aarch64
java-1.8.0-openjdk-debug.aarch64        1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-demo.aarch64         1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-demo-debug.aarch64   1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
###java-1.8.0-openjdk-devel.aarch64        1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core 
java-1.8.0-openjdk-devel-debug.aarch64  1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-headless.aarch64     1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-headless-debug.aarch64
java-1.8.0-openjdk-javadoc.noarch       1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-javadoc-debug.noarch 1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-javadoc-zip.noarch   1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-javadoc-zip-debug.noarch
java-1.8.0-openjdk-src.aarch64          1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core
java-1.8.0-openjdk-src-debug.aarch64    1:1.8.0.272.b10-1.amzn2.0.1   amzn2-core


[ec2-user@ip-172-31-71-190 ~]$ yum install -y java-1.8.0-openjdk-devel.aarch64
---->   Have both compiler (to build) + run time (jenkins needs run time)


##sudo update-alternatives  --config java
There is 1 program that provides 'java'.
  Selection    Command
-----------------------------------------------
*+ 1           java-1.8.0-openjdk.aarch64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.amzn2.0.1.aarch64/jre/bin/java)

Enter to keep the current selection[+], or type selection number: 1



: 2
## install jenkins
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
# Get repo file
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
# import key
sudo   yum install jenkins
sudo systemctl restart jenkins
sudo chkconfig jenkins on


: 3
$$$$$$$$$$$$$$$$$$$$$$$$ 333333333333

---->Maven and git


cd /opt
wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
tar -xvf apache-maven-3.6.3-bin.tar.gz 

vim ~/.bash_profile
export M2_HOME=/opt/apache-maven-3.6.3
export M2=/opt/apache-maven-3.6.3/bin
PATH=$PATH:$HOME/bin:$M2:M2_HOME

echo $M2

yum install -y git

$$$$$$$$$$$$$$$$$$$$$$$$   444444444444
---->CI
$$$$$$$$$$$$$$$$$$$$$$$$     5555555555
----> CD
$$$$$$$$$$$$$$$$$$$$$$$$       66666666
---->Jenkins using Maven and git

##take code from git, compile, test, pkg it

New job ---myapp--freestyle

git
Build---> invoke Top-level maven targets
          Goals: clean package
        
        
Error: [my-app] $ mvn clean package
FATAL: command execution failed
java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
 

---->solution   
 ----> Global tool config:     Name: maven-3
                               path: /opt/apache-maven-3.6.3
                               
Build---> invoke Top-level maven targets  ---> ########select maven-3

#get code                                    
#compile
#resolve dep
#run test cases
#package it

$$$$$$$$$$$$$$$$$$$$$$$$   77777777777
: 7
####scripted Pipeline

#node
#stage
#steps

node {  
    stage('Build') { 
        // 
    }
    stage('Test') { 
        // 
    }
    stage('Deploy') { 
        // 
    }
}


$$$$$$$$$$$$$$$$$$$$$$$$        888888888
: 8
string  interpolation
node {  
    
      def name = "harish balusu"
      echo "hello world!!""
--->    echo "Welcome  ${name}"
    
}

$$$$$$$$$$$$$$$$$$$$$$$$           9999999
: 9
welcome

$$$$$$$$$$$$$$$$$$$$$$$$       10 101010

--->1743110-10 - Jenkins Pipeline Integrating Git And Maven 
: 10
pipeline script from SCM

1.) git url
2.) creds
3.) branch
4.) path to script    ( BY DEFUALT Looks at project root-dir)


node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/harikammana_prj.git'
    }
    stage('Compile-package'){
        sh '/opt/apache-maven-3.6.3/bin/mvn clean package'

    }

}


Error: mvn not found

pipeline syntax:
------->tool: use a tool from pre-defined tool installation

node{
    stage('SCM Checkout'){
        git 'https://github.com/devopsproject7/harikammana_prj.git'


    }
        stage('Compile and package'){


            def mvnHOME = tool name: 'maven-3', type: 'maven'
            echo " Welcome to ${mvnHOME}"
            sh "${mvnHOME}/bin/mvn package "

    }
   
}

$$$$$$$$$$$$$$$$$$$$$$$$           1111111
---->1743110-11 - Jenkins Pipeline Email Notifications 
: 11

Configure syatem---> smtp details, port, creds
gmail smtp settings

pp syntax--->  mail:Mail



https://stackoverflow.com/questions/18778240/solve-error-javax-mail-authenticationfailedexception
 There are a few steps you have to keep in mind.

First, make sure you have turned off 2-way authentication of google account
Second, allow access for less secure apps- https://myaccount.google.com/lesssecureapps
Now there are two scenarios If you are developing it in your local machine login to your google account in your browser, this way the google recognizes the machine.

If you have deployed the application onto a server then after the first request you will get an authentication error, so you have to give access to the server, just go here to give access- https://www.google.com/accounts/DisplayUnlockCaptcha


node{
    stage('SCM Checkout'){
        git 'https://github.com/devopsproject7/harikammana_prj.git'


    }
        stage('Compile and package'){


            def mvnHOME = tool name: 'maven-3', type: 'maven'
             echo "Welcome to ${mvnHOME}"

            sh "${mvnHOME}/bin/mvn package "

    }
    stage("Email notification"){
         mail bcc: '', body: 'Hello', cc: '', from: '', replyTo: '', subject: 'Hello1', to: 'devopsvid07@gmail.com'

    }
   
}


$$$$$$$$$$$$$$$$$$$$$$$$ 121212

---> slack


: 12
##Install Slack notification plugin
##SlackSend --->>> pp syntax

Create channel---> connect to App ---> Incoming WebHooks
Webhook URL
https://hooks.slack.com/services/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
 

    
 	Channel	#proj-devops
 	Message	 Welcome to Jenkins
 	Color	good
    Override url	 https://hooks.slack.com/services/
    creds---> secret with text ---> T01LZ7F6PQC/B01LT2YFM8A/RpctibXJs3DXtbpHM1Br26vR
    
 
node{
    stage('SCM Checkout'){
        git 'https://github.com/devopsproject7/harikammana_prj.git'


    }
        stage('Compile and package'){


            def mvnHOME = tool name: 'maven-3', type: 'maven'
             echo "Welcome to ${mvnHOME}"

            sh "${mvnHOME}/bin/mvn package "

    }
    stage("Email notification"){
         mail bcc: '', body: 'Hello', cc: '', from: '', replyTo: '', subject: 'Hello1', to: 'devopsvid07@gmail.com'

    }
   stage('Slack notification'){
       slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#devopsprj_notify', color: 'good', message: 'started ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)', tokenCredentialId: 'SlackDemo'
   }
} 
    

: 13
$$$$$$$$$$$$$$$$$$$$$$$$       131313

---->1743110-13 - Parametrizing Jenkins Jobs 


---->
# ################################################By parameterizing jenkins free-style jobs, gives option to pass different parameters to SAME JOB, and can re-user them


properties([parameters([choice(choices: ['master', 'hello', 'feature-1'], description: '''master
hello
feature-1''', name: 'branch')])])

node{
stage("scm"){
    echo "pull branch  ${params.branch}"
    git branch: "${params.branch}", url: 'https://github.com/devopsproject7/harikammana_prj.git'
}

}
  

: 14
$$$$$$$$$$$$$$$$$$$$$$$$        1414444
Sonarqube

: 15
$$$$$$$$$$$$$$$$$$$$$$$$          151515
install Sonarqube

: 16
$$$$$$$$$$$$$$$$$$$$$$$$          161616
---->1743110-16 - Publish Source Code to SonarQube for Static Code Analysis 


NOTE : |
        Important
         build pass if QG pass,else fail



                
---->Notes-1:  (Analysis)
            After Maven build

            [[1;34mINFO[m] Finished at: 2021-02-03T08:59:27Z
            [[1;34mINFO[m] [1m------------------------------------------------------------------------[m
            [Pipeline] }
            [Pipeline] // stage
            [Pipeline] stage
            [Pipeline] { (SonarQube Analysis) (hide)
            [Pipeline] tool
            [Pipeline] withSonarQubeEnv
            ######Injecting SonarQube environment variables using the configuration: sonar-6
            [Pipeline] {
            [Pipeline] sh
            + /opt/apache-maven-3.6.3/bin/mvn sonar:sonar
            [[1;34mINFO[m] Scanning for projects...
            [[1;31mERROR[m] SonarQube server [http://ec2-3-81-82-203.compute-1.amazonaws.com:9000] can not be reached

--->Notes-2:  (quality Gate) --> Webhook required

Webhook: |
         NOTE
         
[[1;  ANALYSIS SUCCESS[m
[1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  9.119 s
[[1;34mINFO[m] Finished at: 2021-02-03T08:19:47Z
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[Pipeline] }
[Pipeline] // withSonarQubeEnv
[Pipeline] { (Quality Gate check)
[Pipeline] timeout
Timeout set to expire in 1 hr 0 min
[Pipeline] {
[Pipeline] waitForQualityGate
Checking status of SonarQube task 'AXdm-d0uvsHxlMI7guyf' on server 'sonar-6'
SonarQube task 'AXdm-d0uvsHxlMI7guyf' status is 'PENDING'
SonarQube task 'AXdm-d0uvsHxlMI7guyf' status is 'SUCCESS'
SonarQube task 'AXdm-d0uvsHxlMI7guyf' completed. Quality gate is 'OK'


##################################################################################################################

1.)  https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

SonarScanner for Maven:

node {
  stage('SCM') {
    git 'https://github.com/foo/bar.git'
  }
  stage('SonarQube analysis') {
    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used
      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
    }
  }
}


2 :  
-------->pipeline syntax---> Wait for QualityGate


1.)   a.) Go to SonarQube ---> generate token
##
---->  (Acts as userid/password for SQ.Using this, Jenkins connects to SQ, and publishes source code 
       b.) Select project: maven
       ##This will give command  to publish src code to SonarQube
                
2.)  #plugin: SonarQube scanner
3.)  Configure system: SonarQube server details
                 Name: |
                  Name: sonar-6
                  SonarQube Url:9000
                  token---> secret text
 

4.) SonarQube : Administration--->Configuration---> webhooks -->
                                       Name:  |
                                         Name: jenkins-server
                                         url: http:jenkins-ip:8080/sonarqube-webhook/
                                 ## After configuring webhooks,When jenkins check for status, send notification back to Jenkins which is used by pipeline-script

 
 
 node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/hello-world.git'
    }
    stage('Compile-package'){

        //Get maven path
        def mvnHome= tool name: 'maven-3', type: 'maven'
        sh "${mvnHome}/bin/mvn package"
    }
     stage('SonarQube Analysis') {
        def mvnHome =  tool name: 'maven-3', type: 'maven'
        withSonarQubeEnv('sonar-6') {                          ##########Given in sonarqube-server
          sh "${mvnHome}/bin/mvn sonar:sonar"                  ## Get maven path,a nd executing sonar:sonar
          
                                                               ####----> this pushblishes source code to sonarQube
        }
    }                                                          ####---> Here,check for status
     stage("Quality Gate check"){       

##This particular function stops the processs for 1hr maximum.Within 1hr, if we get status from SQ server, then code proceeds without any block

## need to wait for sometime (1 hr), because when  we publish src code to sonarQube, it can take few minutes to complete analysis and get report

          timeout(time: 1, unit: 'HOURS') {  ##internally, calling Groovy function  waitForQualityGate
              def qg = waitForQualityGate()  ##if QG failed, mark build as failed  by sending slack notification bczof QG issues                         ##getting status from SQ server, check status, if not ok..Mark build as fail
              if (qg.status != 'OK') {
                               slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#proj-devops', color: 'danger', message: 'SonarQube Analysis Failed', tokenCredentialId: 'slack'

                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
     }
    stage('Email notification'){
             slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#proj-devops', color: 'good', message: 'Welcome tto Jenkins', tokenCredentialId: 'slack'
             
    }

}


### we can create our own Quality Gates and analyze source code based on custom Quality Code




            
$$$$$$$$$$$$$$$$$$$$$$$$     1919191
: 19
###############1743110-19 - Deploy War File to Tomcat  

1.) jenkins plugin: SSH Agent  ---> To copy war files to remote machines
2.) PP script:     ssh agent
3.) Jenkins creds---> ssh with private key ---> Add jenkins private key


Note: |
    jenkins:
    ssh-key-gen
    ssh-copy-id root@tomcatserver
    
on tomcat:  
    sudo vim /etc/ssh/sshd_config 
    sudo systemctl reload sshd
    sudo passwd root
  cd 
  wget https://mirrors.estointernet.in/apache/tomcat/tomcat-8/v8.5.63/bin/apache-tomcat-8.5.63.tar.gz
  tar -xvf apache-tomcat-8.5.63.tar.gz 
  mv apache-tomcat-8.5.63 tomcat
  sudo  yum install -y java-1.8*
  mv apache-tomcat-8.5.63 tomcat
  cd /home/ec2-user/tomcat/bin/
  ls
  ./startup.sh  start



    
    
 #   git checkout
  #  build
  #  package
  #  Excute ssh agent
  #  Copy war file to tomcat/webapps
  #  Send slack notification




node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/hello-world.git'
    }
    stage('Compile-package'){

        //Get maven path
        def mvnHome= tool name: 'maven-3', type: 'maven'
        sh "${mvnHome}/bin/mvn package"
    }
     stage('Deploy to tomcat'){
         sshagent(['tomcat']) {

         sh 'scp -o StrictHostKeyChecking=no webapp/target/*.war  root@172.31.16.230:/home/ec2-user/tomcat/webapps'
         }
     }
  
   stage('Email notification'){
             slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#devops', color: 'good', message: 'Welcome to Jenkins', tokenCredentialId: 'slack'
             
    }

}

#########SEND BUILD ARTIFACTS OVER SSH

node{
    stage('SCM checkout'){
      git 'https://github.com/devopsproject7/hello-world.git'
    }
    stage('Compile-package'){

        //Get maven path
        def mvnHome= tool name: 'maven-3', type: 'maven'
        sh "${mvnHome}/bin/mvn package"
    }
     stage('Deploy to tomcat'){
         sshPublisher(publishers: [sshPublisherDesc(configName: 'tomcat-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/home/ec2-user/tomcat/webapps', remoteDirectorySDF: false, removePrefix: 'webapp/target/', sourceFiles: 'webapp/target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
     }
  
   stage('Email notification'){
             slackSend baseUrl: 'https://hooks.slack.com/services/', channel: '#devops', color: 'good', message: 'Welcome to Jenkins', tokenCredentialId: 'slack'
             
    }

}


$$$$$$$$$$$$$$$$$$$$$$$$             202020202
: 20

---->1743110-20 - Introduction to Declarative Pipelines 


node---> stages---> steps
pipeleine--->  agent---> stages--> stage---> steps

pipeline{
    agent{
        label "node"
    }
    stages{
        stage("A"){
            steps{
                echo "========executing A========"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}


pipeline {
    agent none 
    stages {
        stage('Example Build') {
            agent { docker 'maven:3-alpine' } 
            steps {
                echo 'Hello, Maven'
                sh 'mvn --version'
            }
        }
        stage('Example Test') {
            agent { docker 'openjdk:8-jre' } 
            steps {
                echo 'Hello, JDK'
                sh 'java -version'
            }
        }
    }
}



pipeline {
    agent any  
    stages {
        stage("welcome") {
            steps {
                echo "Hello World"
            }
        }
      
    }
}

$$$$$$$$$$$$$$$$$$$$$$$$        212121


: 21
---->1743110-21 - Integrating Declarative Pipelines using Git


Declarative pipeline script inline in this case. 

pipeline {
    agent any  
    stages {
        stage("git checkout") {
            steps {
                git 'https://github.com/devopsproject7/hello-world.git'        
             }
        }
      
    }
}

Note: |
    ### We can also pull code from src code mgmt tool ...Pipeline script from SCM
---> does git checkout twice.No need to mention git checkout expicitly



$$$$$$$$$$$$$$$$$$$$$$$$   2222222222
1743110-22 - Using maven builds in Declarative Pipelines 
 

pipeline{
   agent any
   environment{
       def mvnHOME = tool name: 'maven-3', type: 'maven'  
   }
   stages{
    stage("SCM checkout "){
        steps{
            echo "Hello world!!"
            git branch: 'master', url: 'https://github.com/devopsproject7/harikammana_prj.git'
        }
    }
    stage("maven build"){
        steps{
            sh 'echo $PATH'
            sh '${mvnHOME}/bin/mvn clean package'

        }
    }




   }
}





pipeline {
    agent any 
     environment {      ##### we ucan use env. block in specifc stage (local to it) or at global ---Applicable to all stages
         PATH="$PATH:/opt/apache-maven-3.6.3/bin"

     } 

    stages {
        stage("git checkout") {
            steps {
                git 'https://github.com/devopsproject7/hello-world.git'        
             }
        }
        stage("Maven Build"){
            steps{
                sh "mvn   package"
            }

        }
      
    }
}

Add maven to path
 executes 2 stages:
   clone
   build
   
   
$$$$$$$$$$$$$$$$$$$$$$$$ 23232323

------->1743110-23 - Deploy War file to Tomcat - Declarative Pipelines -
: 23



Simple CI/CD process using Declarative Pipeline:

 : |
  PP have 3stages:  Source----> Build,package ---> Deploy
 
 pipeline{
   agent any
   environment{
       def mvnHOME = tool name: 'maven-3', type: 'maven'  
   }
   triggers {
    pollSCM '*/1 * * * *'
   }


   stages{
    stage("SCM checkout "){
        steps{
            git branch: 'master', url: 'https://github.com/devopsproject7/hello-world.git'
        }
    }
    stage("maven build"){
        steps{
            sh 'echo $PATH'
            sh '${mvnHOME}/bin/mvn clean package'

        }
    }
    stage('Deploy to Tomcat'){
        steps{
           sshPublisher(publishers: [sshPublisherDesc(configName: 'tomcat-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//home/ec2-user/tomcat/webapps', remoteDirectorySDF: false, removePrefix: 'webapp/target/', sourceFiles: 'webapp/target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])

        }
    }




   }
}
 
 
: 24
1743110-24 - Display custom build names using Declarative Pipelines 
 
 
 currentBuild.displayName = "devops-project-#"+currentBuild.number

pipeline{
   agent any
   environment{
       def mvnHOME = tool name: 'maven-3', type: 'maven'  
   }
   triggers {
    pollSCM '*/1 * * * *'
   }


   stages{
    stage("SCM checkout "){
        steps{
            git branch: 'master', url: 'https://github.com/devopsproject7/hello-world.git'
        }
    }
    stage("maven build"){
        steps{
            sh 'echo $PATH'
            sh '${mvnHOME}/bin/mvn clean package'

        }
    }
    stage('Deploy to Tomcat'){
        steps{
           sshPublisher(publishers: [sshPublisherDesc(configName: 'tomcat-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//home/ec2-user/tomcat/webapps', remoteDirectorySDF: false, removePrefix: 'webapp/target/', sourceFiles: 'webapp/target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])

        }
    }




   }
}


: 25
k8s intro
: 26
k8s setup kops
: 27
1743110-27 - Kubernetes - Build CI CD Pipelines 

 
pipeline {
    agent any
    stages{
        stage("SCM checkout"){
            steps{
                echo "Hello world!!"
               git branch: 'master', url: 'https://github.com/devopsproject7/node-app.git'
                
            }
        }
        stage('Build Docker Image'){
            steps{
                script{
                    def DOCKER_TAG = getDockerTag()
                    echo "hello tag is: ${DOCKER_TAG} "
                    sh "docker build . -t devopsharish/nodeapp:${DOCKER_TAG}"
                    sh "whoami"
                    sh "docker ps"
                }
                
            }

        }
    }
}

def getDockerTag(){
    def commit =  sh script: 'git rev-parse HEAD', returnStdout: true
    return commit
}




 
 
 
 pipeline {
    agent any
    environment{
        DOCKER_TAG = getDockerTag()
    }
    stages{
        stage("SCM checkout"){
            steps{
                echo "Hello world!!"
               git branch: 'master', url: 'https://github.com/devopsproject7/node-app.git'
                
            }
        }
        stage('Build Docker Image'){
            steps{
                script{
                    echo "hello tag is: ${DOCKER_TAG} "
                    sh "docker build . -t devopsharish/nodeapp:${DOCKER_TAG}"
                    sh "whoami"
                    sh "docker images"
                }
                
            }

        }
        stage("Dockerhub push"){
            steps{
                withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhubPwd')]) {

                sh "docker login -u devopsharish -p  ${dockerhubPwd}"
                sh "docker push devopsharish/nodeapp:${DOCKER_TAG}"
            }
        }
    }
}
}

def getDockerTag(){
    def commit =  sh script: 'git rev-parse HEAD', returnStdout: true
    return commit
}
 
 
 
pipeline {
    agent any
    stages{
        stage('Build Docker Image'){
            steps{
                script{
                    def tag = latestCommitHash()
                    sh "docker build . -t kammana/nodeapp:${tag} "
                }
                
            }

        }
        stage('Push DockerHub'){
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
                    sh "docker login -u kammana -p ${dockerHubPwd}"
                    script{
                        def tag = latestCommitHash()
                        sh """
                            docker push kammana/nodeapp:${tag}
                            chmod +x changeTag.sh
                            ./changeTag.sh ${tag}
                        """
                    }
                }
            }
        }
        stage('Deploy - Kubernetes'){
            steps{
                sshagent(['kops-k8s']) {
                    sh """ 
                       scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ec2-user@52.66.70.61:/home/ec2-user/
                       
                    """
                    script{
                        try{
                            sh "ssh ec2-user@52.66.70.61 kubectl apply -f ."
                        }catch(error){
                            sh "ssh ec2-user@52.66.70.61 kubectl create -f ."
                        }
                    }
                }
            }
        }
    }
}

def latestCommitHash(){
    def commit =  sh returnStdout: true, script: 'git rev-parse HEAD'
    return commit
}


##############################################################################################################
###############################################################################################################
###############################################################################################################


: |
   CI CD Of Docker Containers DevOps Jenkins Pipeline Tutorial Docker CI CD DevOps CI CD
   SCM checkout
   build
    create docker image
    upload to dockerhub
    Using Ansible  Deploy container 


Check:
1.) git 
2.) maven /opt/apache-maven-3.6.3/bin
    If Installed Auto(global tool config): /var/lib/jenkins/tools ---> hudson.tasks.Maven_Maveninstallation

3.) ansible: To execute playbooks  for deployig containers to dev server(we do from jenkins)   
    sudo amazon-linux-extras install ansible2
  
   ansible --version
  ansible 2.9.13
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
 ### executable location = /bin/ansible ---> We need this path, because  we are installing ansible plugin in jenkins, where we need to provide this path
 
  plugin: ansible
  Global tool config:  Name: ansible
                       path: /bin   ##Note: We should only provide path to executable only for all
----> Where executbale is present

4.) install docker
usermod -aG docker jenkins  
 restart jenkins

                       
pp syntax :

git
maven: tools
docker image function last commit :  a.)   sh: shell script 

      def getVersion(){
         def commitHash = sh label: '`get last commit', returnStdout: true, script: 'git rev-parse --short HEAD'
          return commitHash
    }

                                    b.)   In declarative: environment
docker push  : withCredentials                                   
ansible :   ansible playbook invoke playbook                    
--------->  important: How we are passing DOCKER_TAG commit id for playbook

:1

pipeline{
    agent any
    tools {
      maven 'maven3'    //maven added to PATH
    }

    stages{
      stage("SCM Checkout "){
          steps{
              echo "====++++SCM Checkout++++===="

              git branch: 'master', 
              url: 'https://github.com/devopsproject7/dockeransiblejenkins.git'
          }
        }
        stage("Maven build"){
            steps{
                echo "====++++maven build ++++===="
                sh "mvn clean package"
            }
           
        }
      }
    }

----> output    war file generated
[[1;34mINFO[m] Building war: /var/lib/jenkins/workspace/pp1/target/dockeransible.war

   
: 2 
Build docker image


 git rev-parse
 git rev-parse HEAD
027cb3026e01eca204c06f2b94e2a599785e29c6
 s
 git rev-parse HEAD --short
027cb3026e01eca204c06f2b94e2a599785e29c6
fatal: Needed a single revision

 git rev-parse --short HEAD
027cb30
  
pipeline{
    agent any
    tools {
      maven 'maven3'
    }
    environment {
      DOCKER_TAG = getVersion()
    }
    stages{
        stage('SCM'){
            steps{
                git branch: 'master', 
              url: 'https://github.com/devopsproject7/node-app.git'
            }
        }
        
       // stage('Maven Build'){
       //     steps{
       //         sh "mvn clean package"
       //     }
       //  }
        
        stage('Docker Build'){
            steps{
                sh "docker build . -t devopsharish/hariapp:${DOCKER_TAG} "
            }
        }


       stage("Dockerhub push"){
        steps{
            withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerHubPWD')]) {
            sh "docker login -u devopsharish -p ${dockerHubPWD}"
             sh "docker push devopsharish/hariapp:${DOCKER_TAG} "
        }
            
        }

       }
    }
}

def getVersion(){
    def commitHash = sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}


: 3

Write Ansible pb to deploy container on dev server




pipeline{
    agent any
    tools {
      maven 'maven3'
    }
    environment {
      DOCKER_TAG = getVersion()
    }
    stages{
        stage('SCM'){
            steps{
                git branch: 'master', 
              url: 'https://github.com/devopsproject7/node-app.git'
            }
        }
        
       // stage('Maven Build'){
       //     steps{
       //         sh "mvn clean package"
       //     }
       //  }
        
        stage('Docker Build'){
            steps{
                sh "docker build . -t devopsharish/hariapp:${DOCKER_TAG} "
            }
        }


       stage("Dockerhub push"){
        steps{
            withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerHubPWD')]) {
            sh "docker login -u devopsharish -p ${dockerHubPWD}"
             sh "docker push devopsharish/hariapp:${DOCKER_TAG} "
        }
            
        }

       }

       
       
        stage('Docker Deploy '){
            steps{
ansiblePlaybook credentialsId: 'ec2-user', disableHostKeyChecking: true, extras: "-e DOCKER_TAG=${DOCKER_TAG}", installation: 'ansible', inventory: 'inventory', playbook: 'deploy-docker.yml'
            }
        }

    }
}

def getVersion(){
    def commitHash = sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}


---
- hosts: dev
  become: true
  tasks:
  - name: instal;l python pip 
    yum: 
      name: python-pip 
      state: present
  - name: Install Docker
    yum: 
      name: docker 
      state: present 
  - name: start docker 
    service:
     name: docker 
     state: started 
     enabled: yes 
  - name: Install docker-py python module
    pip:
     name: docker-py
     state: present
  - name: start container
    docker_container:
     name: hariapp 
     image: "devopsharish/hariapp:{{DOCKER_TAG}}"  
     state: started
     published_ports: 
     - 0.0.0.0:8080:8080
     
[dev]
172.31.86.45 ansible_user=root 







 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Simple CI/CD process using Declarative Pipeline on k8s

nodejsapp

: |
    //Create Docker image and push to Dockerhub


----->    //Create Docker image 
pipeline {
    agent any                 //pick any available agent
    environment{               //:To use getDockerTag in multiple stages, use it in environment block
        DOCKER_TAG = getDockerTag()
    }
    stages{
        stage('Build Docker Image'){
            steps{
                sh "docker build . -t kammana/nodeapp:${DOCKER_TAG}"
           //registry/name:tag.        devopsharish/nodeapp:${DOCKER_TAG}
          // :This should be dynamic.Every time we run job  need to change version of docker image 
         
            }
        }
    }
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
    
    
    // :git command to get latest commit ID.This will be always unique and new whenever code changes
    //Store value into varible. Value returned by git command stored into tag varaible  and return it.
} 


--->     //push  Docker image  to Dockerhub

jenkins creds---> Secret Text 
pp syntax--->  withCredentials: Bind to Variables--->        varaible:dockerhubPWD, creds

pipeline {
    agent any                 //pick any available agent
    environment{               //:To use getDockerTag in multiple stages, use it in environment block
        DOCKER_TAG = getDockerTag()
    }
    stages{
        stage('Build Docker Image'){
            steps{
                sh "docker build . -t kammana/nodeapp:${DOCKER_TAG}"
           //registry/name:tag.        devopsharish/nodeapp:${DOCKER_TAG}
          // :This should be dynamic.Every time we run job  need to change version of docker image 
         
            }
        }
           
        stage('DockerHub Push'){
         steps{
             withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
             sh "docker login -u kammana -p ${dockerHubPwd}"
             sh "docker push kammana/nodeapp:${DOCKER_TAG}"
                                     //: Need to access password from this variable
                                     //: push image to hub
                                            
        }
        }
    }
    }
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
    
    
    // :git command to get latest commit ID.This will be always unique and new whenever code changes
    //Store value into varible. Value returned by git command stored into tag varaible  and return it.
} 


-----------> Pull docker images and Deploy to k8s


apiVersion: v1
kind: Pod
metadata:
  name: nodeapp
  labels:
    app: nodeapp
spec:
  containers:
    - name: nodeapp
      image: kammana/nodeapp:tagVersion      ### Want to dynamically change tag version every time i build
                                             ##Ex: replace with current docker version and deploy yo k8s
      ports:
        - containerPort: 8080
        
        
----> To chage tag dynamically ---> shell script written:)

node-app/changeTag.sh
#!/bin/bash
sed "s/tagVersion/$1/g" pods.yml > node-app-pod.yml


takes pods.yaml as input  and replace with latest tag


        
kind: Service
apiVersion: v1
metadata:
  name: nodeapp
spec:
  selector:
    app: nodeapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: LoadBalancer                    ## create ELB in AWS




plugin: ssh agent
creds---> ssh with private key ---> private key for connecting to k8s

pp script ---> ssh agent ---> generate script

pipeline {
    agent any
    stages{
        stage('Build Docker Image'){
            steps{
                script{
                    def tag = latestCommitHash()
                    sh "docker build . -t kammana/nodeapp:${tag} "
                }
                
            }

        }
        stage('Push DockerHub'){
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
                    sh "docker login -u kammana -p ${dockerHubPwd}"
                    script{
                        def tag = latestCommitHash()
                        sh """
                            docker push kammana/nodeapp:${tag}
                            chmod +x changeTag.sh
                            ./changeTag.sh ${tag}
                        """
                    }
                }
            }
        }
        stage('Deploy - Kubernetes'){
            steps{
                sshagent(['kops-k8s']) {
                    sh """ 
                       scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ec2-user@52.66.70.61:/home/ec2-user/
                       
                    """
                    script{
                        try{
                            sh "ssh ec2-user@52.66.70.61 kubectl apply -f ."
                        }catch(error){
                            sh "ssh ec2-user@52.66.70.61 kubectl create -f ."
                        }
                    }
                }
            }
        }
    }
}

def latestCommitHash(){
    def commit =  sh returnStdout: true, script: 'git rev-parse HEAD'
    return commit
}








pipeline {
    agent any                                                    
    environment{
        DOCKER_TAG = getDockerTag()        
        NEXUS_URL  = "172.31.34.232:8080"
        IMAGE_URL_WITH_TAG = "${NEXUS_URL}/node-app:${DOCKER_TAG}"     
    }
    stages{
        stage('Build Docker Image'){
            steps{
                sh "docker build . -t ${IMAGE_URL_WITH_TAG}"          
            }
        }
        stage('Nexus Push'){
            steps{
                withCredentials([string(credentialsId: 'nexus-pwd', variable: 'nexusPwd')]) {
                    sh "docker login -u admin -p ${nexusPwd} ${NEXUS_URL}"
                    sh "docker push ${IMAGE_URL_WITH_TAG}"
                }
            }
        }
        stage('Docker Deploy Dev'){
            steps{
                sshagent(['tomcat-dev']) {
                    withCredentials([string(credentialsId: 'nexus-pwd', variable: 'nexusPwd')]) {
                        sh "ssh ec2-user@172.31.0.38 docker login -u admin -p ${nexusPwd} ${NEXUS_URL}"
                    }
					// Remove existing container, if container name does not exists still proceed with the build
					sh script: "ssh ec2-user@172.31.0.38 docker rm -f nodeapp",  returnStatus: true
                    
                    sh "ssh ec2-user@172.31.0.38 docker run -d -p 8080:8080 --name nodeapp ${IMAGE_URL_WITH_TAG}"
                }
            }
        }
    }
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag                                        
    
    // :git command to get latest commit ID.This will be always unique and new whenever code changes
    //Store value into varible. Value returned by git command stored into tag varaible  and return it.
}













########jenkins linter example

pipeline{
    agent any
    stages{
        steps{
            script{
                def name = "harish balusu"    //If we use groovy synta, should keep in script block
            }

        }
 }

 }

















